End point Ajouter index

- verb : PUT address : localhost:9200/<index>, => dans le corps de la requête la configuration.

End point Ajouter des données

- Verb : PUT localhost:9200/<index>/_bulk, => dans le corps de la requête on ajoute les données,

End Point Création d'index templates

- Verb : POST || PUT localhost:9200/_index_template/template_movie

End Point pour récupérer les entités dans elasticsearch

- Verb : GET localhost:9200/_cat/templates
End Point pour effectuer une recherche

- Verb : GET localhost:9200/<index>/_search dans le corps objet json DSL de recherches 
Exemple avec term
{
    "query":{
        "term":{
            "field_name" : "exact_value"
        }
    }
}

Exemple full-text et match

{
    "query":{
        "match":{
            "fields.title": "Man of Steel"
        }
    }
}

Exemple full-text et match avec objet

{
    "query":{
        "match":{
            "fields.title": {
                "query" : "Man of steel",
                "fuzziness":"AUTO"
                "operator":"and"
            }
        },
    }
}

Exemple Mutli-match
{
    "query":{
        "multi_match":{
            "query" : "James",
            "fields": ["fields.title", "fields.directors"]
        }
    }
}

Exemple Query_string

{
    "query":{
        "query_string":{
            "query": "Man of steel OR James",
            "default_field" : "fields.title"
        }
    }
}

Exemple Avec bool <should>
//option should => permet de cumuler plusieurs bool OR
//option must => permet de cumuler plusieurs bool AND
//option must_not => non du must
//option should_not => non du should
{
    "query" : {
        "bool": {
            "must":[
                {"match_phrase":{
                    "fields.title":"Star Wars"
                }},
                {"match":{
                    "fields.directors":"George Lucas"
                }}
            ]
        }
    }
}



//Match sur un interval de date
range:{
    "fields.release_date": {"from":depart,"to":end}
}


//Exemple d'envoie de requête search avec curl
curl -XGET localhost:9200/movies/_search -H "content-type:application/json" --data-binary @query.json -o result.json

//Exemple d'ajout de données avec curl
curl -XPUT localhost:9200/movies/_bulk -H "content-type:application/json" --data-binary @big-movies-elastic.json -o result.json

//pour enregister un template de recherche comme script
//On utilise l'EndPoint de API _scripts
//chaque script doit avoir un nom
POST localhost:9200/_scripts/<nomscript>
{
    "script":{
        "lang": "mustache",
        "source":{
            "query":{
                "match":{
                    "fields.actors":"{{actor}}"
                }
            }
        },
        "params":{
            "actor":"Harrison"
        }
    }
}